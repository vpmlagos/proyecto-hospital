{
  "version": 3,
  "sources": ["../../@restart/hooks/esm/useIsomorphicEffect.js", "../../@restart/ui/esm/useWindow.js", "../../dom-helpers/esm/contains.js"],
  "sourcesContent": ["import { useEffect, useLayoutEffect } from 'react';\nconst isReactNative = typeof global !== 'undefined' &&\n// @ts-ignore\nglobal.navigator &&\n// @ts-ignore\nglobal.navigator.product === 'ReactNative';\nconst isDOM = typeof document !== 'undefined';\n\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;", "import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\nexport default function useWindow() {\n  return useContext(Context);\n}", "/* eslint-disable no-bitwise, no-cond-assign */\n\n/**\n * Checks if an element contains another given element.\n * \n * @param context the context element\n * @param node the element to check\n */\nexport default function contains(context, node) {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  if (context.contains) return context.contains(node);\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\n}"],
  "mappings": ";;;;;;;;;;;AAAA,mBAA2C;AAC3C,IAAM,gBAAgB,OAAO,WAAW;AAExC,OAAO;AAEP,OAAO,UAAU,YAAY;AAC7B,IAAM,QAAQ,OAAO,aAAa;AAUlC,IAAO,8BAAQ,SAAS,gBAAgB,+BAAkB;;;AChB1D,IAAAA,gBAA0C;AAE1C,IAAM,cAAuB,6BAAc,oBAAY,SAAS,MAAS;AAClE,IAAM,iBAAiB,QAAQ;AAQvB,SAAR,YAA6B;AAClC,aAAO,0BAAW,OAAO;AAC3B;;;ACLe,SAAR,SAA0B,SAAS,MAAM;AAG9C,MAAI,QAAQ,SAAU,QAAO,QAAQ,SAAS,IAAI;AAClD,MAAI,QAAQ,wBAAyB,QAAO,YAAY,QAAQ,CAAC,EAAE,QAAQ,wBAAwB,IAAI,IAAI;AAC7G;",
  "names": ["import_react"]
}
